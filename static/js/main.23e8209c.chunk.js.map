{"version":3,"sources":["components/ColorPeg/ColorPeg.jsx","components/Pallets/Pallets.jsx","components/ColorPicker/ColorPicker.jsx","App.js","serviceWorker.js","index.js"],"names":["ColorPeg","styles","reactCSS","card","backgroundColor","this","props","color","boxShadow","title","fontSize","className","style","id","Component","Pallets","state","background","colors","handleChangeComplete","setState","hex","handlePickColor","e","diva","target","colorPick","toString","onClick","map","index","key","onChangeComplete","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8RA8BeA,G,8KAvBP,IAAMC,EAASC,IAAS,CAChB,QAAW,CACTC,KAAM,CACJC,gBAAiBC,KAAKC,MAAMC,MAC5BC,UAAW,6BAEbC,MAAO,CACLC,SAAU,SACVH,MAAO,UAInB,OACI,yBAAKI,UAAU,WAAWC,MAAOX,EAAOE,KAAMU,GAAIR,KAAKC,MAAMO,IACzD,uBAAGF,UAAU,SACRN,KAAKC,MAAMC,Y,GAlBTO,c,QCwDRC,GCvDWD,Y,mNDItBE,MAAQ,CACJC,WAAY,UACZC,OAAS,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,WACjEL,GAAK,G,EAGTM,qBAAuB,SAACZ,GACpB,EAAKa,SAAS,CAAEH,WAAYV,EAAMc,MAClC,EAAKL,MAAME,OAAO,EAAKF,MAAMH,IAAMN,EAAMc,K,EAI7CC,gBAAkB,SAACC,GACf,IAAMC,EAAOD,EAAEE,OACXC,EAAYF,EAAKZ,MAAMR,gBAC3BsB,EAAYA,EAAUC,WACtB,EAAKP,SAAS,CAACH,WAAaS,IAC5B,EAAKN,SAAS,CAACP,GAAKW,EAAKX,M,uDAKzB,OACI,6BACK,8BACG,kCACA,yBAAKF,UAAU,UAAUiB,QAASvB,KAAKiB,iBAClCjB,KAAKW,MAAME,OAAOW,KAAI,SAACtB,EAAOuB,GAC3B,OAAO,kBAAC,EAAD,CAAUvB,MAAOA,EAAOwB,IAAKD,EAAOjB,GAAIiB,GAAQvB,OAG/D,iCACA,kBAAC,eAAD,CACQA,MAAQF,KAAKW,MAAMC,WACnBe,iBAAmB3B,KAAKc,uBAE/B,kBAAC,iBAAD,CAAgBZ,MAAQF,KAAKW,MAAMC,WAC5Be,iBAAmB3B,KAAKc,8B,GAtC9BL,cEqBPmB,E,uKAhBX,OACE,yBAAKtB,UAAU,OACb,gCACE,4CAKJ,kBAAC,EAAD,W,GAbYG,aCIEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.23e8209c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './ColorPeg.css'\nimport reactCSS from 'reactcss'\n\nclass ColorPeg extends Component{\n    \n    render(){\n        const styles = reactCSS({\n                'default': {\n                  card: {\n                    backgroundColor: this.props.color,\n                    boxShadow: '0 2px 4px rgba(0,0,0,.15)',\n                  },\n                  title: {\n                    fontSize: '2.8rem',\n                    color: 'red',\n                  },\n                },\n              })\n        return (\n            <div className='ColorPeg' style={styles.card} id={this.props.id} >\n                <p className='hideP'>\n                    {this.props.color}\n                </p>\n            </div>\n        );\n    }\n}\n\n\nexport default ColorPeg;","import React, { Component } from 'react';\nimport ColorPeg from '../ColorPeg/ColorPeg'\nimport ColorPicker from '../ColorPicker/ColorPicker'\nimport { SketchPicker, SwatchesPicker } from 'react-color';\nimport './Pallets.css'\nimport ReactDOM from 'react-dom'\nimport reactCSS from 'reactcss'\n\nclass Pallets extends Component{\n    state = {\n        background: '#f35c87',\n        colors : ['#f35c87', '#20639b', '#3caea3', '#f6d55c', '#ed553b', '#17bfd1'],\n        id : 0\n    }\n    \n    handleChangeComplete = (color) => {\n        this.setState({ background: color.hex });\n        this.state.colors[this.state.id] = color.hex\n       \n\n    }\n    handlePickColor = (e) => {\n        const diva = e.target\n        let colorPick = diva.style.backgroundColor;\n        colorPick = colorPick.toString();\n        this.setState({background : colorPick})\n        this.setState({id : diva.id})\n    }\n    render(){\n        \n          \n        return (\n            <div>\n                 <main>\n                    <section></section>\n                    <div className='Pallets' onClick={this.handlePickColor}>\n                        {this.state.colors.map((color, index) => {\n                            return <ColorPeg color={color} key={index} id={index}>{color}</ColorPeg>\n                        })}\n                    </div>\n                    <section >\n                    <SketchPicker\n                            color={ this.state.background }\n                            onChangeComplete={ this.handleChangeComplete }\n                    />\n                     <SwatchesPicker color={ this.state.background }\n                            onChangeComplete={ this.handleChangeComplete }\n                            \n                        ></SwatchesPicker>\n                        \n                    </section>\n                </main>\n            </div>\n            \n           \n        );\n    }\n}\n\n\nexport default Pallets;","import React, { Component } from 'react';\nimport { SketchPicker, SwatchesPicker } from 'react-color';\n\n\n\nclass ColorPicker extends Component{\n    state = {\n        background: this.props.colorPick,\n      }\n    \n      handleChangeComplete = (color) => {\n        this.setState({ background: color.hex });\n        console.log(this.props.colorPick)\n      }\n    render(){\n        \n        return (\n            <div className='Picker'>\n                    <SketchPicker\n                            color={ this.state.background }\n                            onChangeComplete={ this.handleChangeComplete }\n                        />\n                        <SwatchesPicker color={ this.state.background }\n                            onChangeComplete={ this.handleChangeComplete }\n                            \n                        ></SwatchesPicker>\n            </div>\n        );\n    }\n}\n\n\nexport default ColorPicker;","import React, { Component } from 'react'\n// import ReactDOM from 'react-dom'\n\nimport './App.css'\nimport { Swatch } from 'node-vibrant/lib/color';\nimport reactCSS from 'reactcss'\nimport Pallets from './components/Pallets/Pallets'\n\nclass App extends Component {\n \n\n  render() {\n   \n    return (\n      <div className='App'>\n        <header>\n          <h1>\n            Little Cute\n          </h1>\n        </header>\n        \n      <Pallets/>\n      \n      </div>\n      \n    );\n}\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}