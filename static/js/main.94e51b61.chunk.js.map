{"version":3,"sources":["cl.png","components/ColorPeg/ColorPeg.jsx","components/Pallets/Pallets.jsx","components/Schema/Colors.jsx","components/Schema/Schema.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","ColorPeg","state","value","copied","showHuePicker","e","huePicker","target","querySelector","console","log","style","display","hideHuePicker","styles","reactCSS","card","backgroundColor","this","props","color","boxShadow","className","id","onMouseOver","onMouseOut","Component","Pallets","handleChange","setState","background","hex","colors","handlePickColor","diva","colorPick","toString","pictures","p1","p2","p3","onDrop","bind","pictureFiles","pictureDataURLs","onChange","height","onClick","map","index","key","onChangen","width","disableAlpha","Colors","tinycolor","require","Palette","variation","setting","settingValue","changeHex","changeVariation","changeSetting","changeSettings","changeSettingValue","getAttribute","tetrad","analogous","monochromatic","splitcomplement","triad","complement","toHexString","colorPalette","Array","isArray","t","hexColor","lighten","brighten","darken","desaturate","saturate","greyscale","undefined","Navbar","expand","bg","variant","Nav","Toggle","aria-controls","Collapse","NavDropdown","onSelect","handleVariationChange","title","Item","eventKey","Divider","Link","randomColor","random","setRandom","Form","preventDefault","handleHexChange","inline","FormControl","type","placeholder","App","useState","src","logo","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.94e51b61.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cl.9468da7a.png\";","import React, { Component } from 'react';\n\nimport './ColorPeg.css'\nimport reactCSS from 'reactcss'\n\nclass ColorPeg extends Component{\n    state = {\n        value: '',\n        copied: false,\n      };\n    showHuePicker = (e) => {\n        const target = e.target\n        const huePicker = target.querySelector('p')\n        console.log(huePicker)\n        huePicker.style.display = 'block'\n    }\n    hideHuePicker = (e) => {\n        const target = e.target\n        const huePicker = target.querySelector('p')\n        huePicker.style.display = 'none'\n    }\n    render(){\n        const styles = reactCSS({\n                'default': {\n                  card: {\n                    backgroundColor: this.props.color,\n                    boxShadow: '0 2px 4px rgba(0,0,0,.15)',\n\n                  },\n                },\n              })\n        return (\n            <div className='ColorPeg' style={styles.card} id={this.props.id} onMouseOver={this.showHuePicker}  onMouseOut={this.hideHuePicker} >\n               <div className='pContainer'>\n                   <p className='colorCode'>\n                       {this.props.color}\n                   </p>\n                   </div>\n               \n            </div>\n        );\n    }\n}\n\n\nexport default ColorPeg;","import React, { Component } from 'react';\nimport ColorPeg from '../ColorPeg/ColorPeg'\nimport { SwatchesPicker, MaterialPicker, ChromePicker, GithubPicker } from 'react-color';\nimport './Pallets.css'\n// import ImageUploader from 'react-images-upload';\n\nclass Pallets extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n           \n             pictures: '',\n             background: '#f35c87',\n        colors : ['#D4295A', '#845EC2', '#FF9671', '#FFC75F', '#B39CD0', '#00C9A7'],\n        id : 0,\n        p1 : ['#feda75', '#fa7e1e','#d62976', '#962fbf', '#4f5bd5' , '#1DC0FF'],\n        p2 : ['#007777', '#006666','#005555', '#004444', '#003333', '#002222'],\n        p3 : ['\t#ffd4e5', '#d4ffea','#eecbff', '#feffa3', '#dbdcff', '#FFCCBC' ],\n             };\n             \n        this.onDrop = this.onDrop.bind(this);\n    }\n\n\n    onDrop(pictureFiles, pictureDataURLs) {\n        this.setState({\n            pictures: pictureDataURLs\n        });\n        \n    }\n    \n    handleChange = (color) => {\n        this.setState({ background: color.hex });\n        this.state.colors[this.state.id] = color.hex\n       \n\n    }\n    handlePickColor = (e) => {\n        const diva = e.target\n        let colorPick = diva.style.backgroundColor;\n        colorPick = colorPick.toString();\n        this.setState({background : colorPick})\n        this.setState({id : diva.id})\n    }\n    render(){\n        \n          \n        return (\n            <div>\n                <section className='headerbg'>\n                    <p>\n                        Change each peg's color by clicking to built your new pallete.\n                    </p>\n                </section>\n                 <main>\n                    <section>\n                    <SwatchesPicker color={ this.state.background }\n                            onChange={ this.handleChange}\n                            height='240px'\n                            className='swatches'\n                    ></SwatchesPicker>\n                    \n                    </section>\n                    <div className='sections'>\n                        <div className='Pallets' onClick={this.handlePickColor}>\n                            {this.state.colors.map((color, index) => {\n                                return <ColorPeg color={color} key={index} id={index} onChangen={ this.handleChange}>\n                                </ColorPeg>\n                            })}\n                        </div>\n                        <GithubPicker color={ this.state.background }\n                            onChange={ this.handleChange }\n                            width='200px'\n                            className='marg'\n                            />\n                        {/* <ImageUploader\n                        className='uploader'\n                withIcon={true}\n                buttonText='Choose images'\n                onChange={this.onDrop}\n                imgExtension={['.jpg', '.gif', '.png', '.gif']}\n                maxFileSize={5242880}\n            />\n            <img src={this.state.pictures}></img> */}\n\n\n\n\n                    </div>\n                    \n                    <section >\n                    <ChromePicker\n                            color={ this.state.background }\n                            onChange={ this.handleChange }\n                            height='250px'\n                            disableAlpha='false'\n                            className='margin'\n\n                    /> \n                    </section>\n                </main>\n                <section className='headerbg'>\n                    <p>\n                        Famouse Pallets.\n                    </p>\n                </section>\n                <div className='palletEX'>\n                    \n                    <div className='Pallets' onClick={this.handlePickColor}>\n                            {this.state.p1.map((color, index) => {\n                                return <ColorPeg color={color} key={index} id={index} onChangen={ this.handleChange}>\n                                </ColorPeg>\n                            })}\n                        </div>\n                        <div className='Pallets' onClick={this.handlePickColor}>\n                            {this.state.p2.map((color, index) => {\n                                return <ColorPeg color={color} key={index} id={index} onChangen={ this.handleChange}>\n                                </ColorPeg>\n                            })}\n                        </div>\n                        <div className='Pallets' onClick={this.handlePickColor}>\n                            {this.state.p3.map((color, index) => {\n                                return <ColorPeg color={color} key={index} id={index} onChangen={ this.handleChange}>\n                                </ColorPeg>\n                            })}\n                        </div>\n\n                </div>\n            </div>\n            \n           \n        );\n    }\n}\n\n\nexport default Pallets;","import React from \"react\";\n\n\nexport default function Colors({ hex }) {\n  return (\n    <div className='ColorPeg' style={{ backgroundColor: hex }}>\n      <div className='pContainerRotat'>\n        <p className='rotatedp'>\n        {hex}\n        </p>\n      </div>\n\n    </div>\n  );\n}","import React from \"react\";\nimport Colors from \"./Colors\";\nimport { Navbar, Form, Nav, FormControl, NavDropdown } from \"react-bootstrap\";\n\n\nconst tinycolor = require(\"tinycolor2\");\n\nexport default function Palette({ hex, variation, setting, settingValue, changeHex,\n    changeVariation, changeSetting, changeSettingValue }) {\n    // Setting handler\n    const handleHexChange = e => {\n        e.preventDefault();\n        changeHex(e.target.value);\n    };\n    \n    const handleVariationChange = variation => {\n        changeVariation(variation);\n    };\n    \n    const changeSettings = e => {\n        const setting = e.target.getAttribute(\"value\");\n        changeSetting(setting);\n    };\n    \n    const setRandom = () => {\n        const randomColor = tinycolor.random().toHexString();\n        changeHex(randomColor);\n    };\n\n    //  Schema colors handler \n    let colors;\n  // Using a switch to set variation type set\n  switch (variation) {\n    case \"tetrad\":\n      colors = tinycolor(hex).tetrad();\n      break;\n    case \"analogous\":\n      colors = tinycolor(hex).analogous();\n      break;\n    case \"monochromatic\":\n      colors = tinycolor(hex).monochromatic();\n      break;\n    case \"splitcomplement\":\n      colors = tinycolor(hex).splitcomplement();\n      break;\n    case \"triad\":\n      colors = tinycolor(hex).triad();\n      break;\n    case \"tetrad\":\n      colors = tinycolor(hex).tetrad();\n      break;\n    case \"complement\":\n      colors = tinycolor(hex).complement().toHexString();\n      break;\n  }\n\n  // Using a dictionary object to set setting\n  const settings = color => {\n    const converter = {\n      lighten: tinycolor(color).lighten(settingValue).toString(),\n      brighten: tinycolor(color).brighten(settingValue).toString(),\n      darken: tinycolor(color).darken(settingValue).toString(),\n      desaturate: tinycolor(color).desaturate(settingValue).toString(),\n      saturate: tinycolor(color).saturate(settingValue).toString(),\n      greyscale: tinycolor(color).greyscale(settingValue).toString(),\n      undefined: color,\n    };\n\n    return converter[setting];\n  };\n\n  let colorPalette;\n  if (!Array.isArray(colors)) {\n    return <Colors hex={colors} className='ColorPeg' />;\n  } else {\n    colorPalette = colors.map(t => {\n      let hexColor = t.toHexString();\n\n      hexColor = settings(hexColor);\n\n      return <Colors hex={hexColor} className='ColorPeg'/>;\n    });\n  }\n\n  return(\n      <section>\n        <div>\n        <Navbar expand=\"lg\" bg=\"light\" variant=\"light\">\n        <Nav className=\"mr-auto\">\n          <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n          <Navbar.Collapse id=\"responsive-navbar-nav\">\n            <NavDropdown\n              onSelect={e => handleVariationChange(e)}\n              title=\"Variation\"\n              id=\"variation\"\n            >\n              <NavDropdown.Item eventKey=\"analogous\">\n                Analogous\n              </NavDropdown.Item>\n              <NavDropdown.Item eventKey=\"monochromatic\">\n                Monochromatic\n              </NavDropdown.Item>\n\n              <NavDropdown.Item eventKey=\"splitcomplement\">\n                Split Complement\n              </NavDropdown.Item>\n              <NavDropdown.Item eventKey=\"triad\">Triad</NavDropdown.Item>\n              <NavDropdown.Item eventKey=\"tetrad\">Tetrad</NavDropdown.Item>\n            </NavDropdown>\n            <NavDropdown.Divider />\n\n            <Nav.Link\n              value={\"lighten\"}\n              eventKey={\"lighten\"}\n              onClick={e => changeSettings(e)}\n            >\n              Lighten\n            </Nav.Link>\n            <Nav.Link value={\"brighten\"} onClick={e => changeSettings(e)}>\n              Brighten\n            </Nav.Link>\n            <Nav.Link value={\"darken\"} onClick={e => changeSettings(e)}>\n              Darken\n            </Nav.Link>\n            <Nav.Link value={\"desaturate\"} onClick={e => changeSettings(e)}>\n              Desaturate\n            </Nav.Link>\n            <Nav.Link value={\"saturate\"} onClick={e => changeSettings(e)}>\n              Saturate\n            </Nav.Link>\n            <Nav.Link value={\"greyscale\"} onClick={e => changeSettings(e)}>\n              Greyscale\n            </Nav.Link>\n            <Nav.Link id=\"random\" onClick={() => setRandom()}>\n                Random\n            </Nav.Link>\n          </Navbar.Collapse>\n        </Nav>\n        \n        <Form onChange={e => handleHexChange(e)} inline>\n          <FormControl type=\"text\" placeholder=\"#77d36a\" className=\"mr-sm-2\" />\n        </Form>\n      </Navbar>\n        </div>\n        <main>\n            <div></div>\n            <div className='sections'>\n              <div className='Pallets'>{colorPalette}</div>\n            </div>\n            \n            <div></div>\n        </main>\n        \n\n      </section>\n  \n  ) \n}","import React,{ useState } from 'react'\nimport './App.css'\nimport Pallets from './components/Pallets/Pallets'\nimport Schema from './components/Schema/Schema'\nimport logo from './cl.png'\n\nfunction App() {\n  const [hex, changeHex] = useState(\"#F44336\");\n  const [variation, changeVariation] = useState(\"analogous\");\n  const [setting, changeSetting] = useState();\n  const [settingValue, changeSettingValue] = useState(20);\n   \n    return (\n      <div className='App'>\n        <header>\n          <h1>\n            cute colors\n          </h1>\n          <img src={logo} className/>\n        </header>\n\n              <Schema\n                settingValue={settingValue}\n                setting={setting}\n                variation={variation}\n                hex={hex}\n                changeSetting={changeSetting}\n                changeVariation={changeVariation}\n                changeHex={changeHex}\n                changeSettingValue={changeSettingValue}\n              />\n          <Pallets></Pallets>\n          <footer className='headerbg'>\n            <p>Build by<a href='https://yasamanloghmani.com'>YasamanLoghmani</a></p>\n          </footer>\n    \n      </div>\n      \n    )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router} from 'react-router-dom';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}