{"version":3,"sources":["components/ColorPeg/ColorPeg.jsx","components/Pallets/Pallets.jsx","App.js","serviceWorker.js","index.js"],"names":["ColorPeg","state","value","copied","showHuePicker","e","huePicker","target","querySelector","console","log","style","display","hideHuePicker","styles","reactCSS","card","backgroundColor","this","props","color","boxShadow","className","id","onMouseOver","onMouseOut","Component","Pallets","handleChange","setState","background","hex","colors","handlePickColor","diva","colorPick","toString","pictures","p1","p2","p3","onDrop","bind","pictureFiles","pictureDataURLs","onChange","height","onClick","map","index","key","onChangen","width","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.da5a7cd8.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './ColorPeg.css'\nimport reactCSS from 'reactcss'\n\nclass ColorPeg extends Component{\n    state = {\n        value: '',\n        copied: false,\n      };\n    showHuePicker = (e) => {\n        const target = e.target\n        const huePicker = target.querySelector('p')\n        console.log(huePicker)\n        huePicker.style.display = 'block'\n    }\n    hideHuePicker = (e) => {\n        const target = e.target\n        const huePicker = target.querySelector('p')\n        huePicker.style.display = 'none'\n    }\n    render(){\n        const styles = reactCSS({\n                'default': {\n                  card: {\n                    backgroundColor: this.props.color,\n                    boxShadow: '0 2px 4px rgba(0,0,0,.15)',\n\n                  },\n                },\n              })\n        return (\n            <div className='ColorPeg' style={styles.card} id={this.props.id} onMouseOver={this.showHuePicker}  onMouseOut={this.hideHuePicker} >\n               <div className='pContainer'>\n                   <p className='colorCode'>\n                       {this.props.color}\n                   </p>\n                   </div>\n               \n            </div>\n        );\n    }\n}\n\n\nexport default ColorPeg;","import React, { Component } from 'react';\nimport ColorPeg from '../ColorPeg/ColorPeg'\nimport { SketchPicker, SwatchesPicker, MaterialPicker } from 'react-color';\nimport './Pallets.css'\nimport ImageUploader from 'react-images-upload';\n\n\n\n\n\nclass Pallets extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n           \n             pictures: '',\n             background: '#f35c87',\n        colors : ['#845EC2', '#845EC2', '#FF9671', '#FFC75F', '#B39CD0', '#00C9A7'],\n        id : 0,\n        p1 : ['#845EC2', '#EDC0FF','#7652B4', '#08004F', '#07226F' , '#1DC0FF'],\n        p2 : ['#356275', '#98AFBA','#657A85', '#6E546C', '#08A1BA', '#A56875' ],\n        p3 : ['#8F4454', '#7E4564','#66486C', '#4E4A6C', '#00486C', '#1E406C' ],\n             };\n             \n        this.onDrop = this.onDrop.bind(this);\n    }\n\n\n    onDrop(pictureFiles, pictureDataURLs) {\n        this.setState({\n            pictures: pictureDataURLs\n        });\n        \n    }\n    \n    handleChange = (color) => {\n        this.setState({ background: color.hex });\n        this.state.colors[this.state.id] = color.hex\n       \n\n    }\n    handlePickColor = (e) => {\n        const diva = e.target\n        let colorPick = diva.style.backgroundColor;\n        colorPick = colorPick.toString();\n        this.setState({background : colorPick})\n        this.setState({id : diva.id})\n    }\n    render(){\n        \n          \n        return (\n            <div>\n                 <main>\n                    <section>\n                    <SwatchesPicker color={ this.state.background }\n                            onChange={ this.handleChange}\n                            height='100%'\n                            \n                    ></SwatchesPicker>\n                    \n                    </section>\n                    <div className='sections'>\n                        <div className='Pallets' onClick={this.handlePickColor}>\n                            {this.state.colors.map((color, index) => {\n                                return <ColorPeg color={color} key={index} id={index} onChangen={ this.handleChange}>\n                                </ColorPeg>\n                            })}\n                        </div>\n                        {/* <ImageUploader\n                        className='uploader'\n                withIcon={true}\n                buttonText='Choose images'\n                onChange={this.onDrop}\n                imgExtension={['.jpg', '.gif', '.png', '.gif']}\n                maxFileSize={5242880}\n            />\n            <img src={this.state.pictures}></img> */}\n\n\n\n\n                    </div>\n                    \n                    <section >\n                    <SketchPicker\n                            color={ this.state.background }\n                            onChange={ this.handleChange }\n                            width='60%'\n\n                    /> \n                    <div className='marg'>\n                    <MaterialPicker color={ this.state.background }\n                            onChange={ this.handleChange }\n                            \n                    ></MaterialPicker> \n                    </div>\n                    \n                    </section>\n                </main>\n                <div>\n                    <h1>Some famouse Pallets</h1>\n                    <div className='Pallets' onClick={this.handlePickColor}>\n                            {this.state.p1.map((color, index) => {\n                                return <ColorPeg color={color} key={index} id={index} onChangen={ this.handleChange}>\n                                </ColorPeg>\n                            })}\n                        </div>\n                        <div className='Pallets' onClick={this.handlePickColor}>\n                            {this.state.p2.map((color, index) => {\n                                return <ColorPeg color={color} key={index} id={index} onChangen={ this.handleChange}>\n                                </ColorPeg>\n                            })}\n                        </div>\n                        <div className='Pallets' onClick={this.handlePickColor}>\n                            {this.state.p3.map((color, index) => {\n                                return <ColorPeg color={color} key={index} id={index} onChangen={ this.handleChange}>\n                                </ColorPeg>\n                            })}\n                        </div>\n\n                </div>\n            </div>\n            \n           \n        );\n    }\n}\n\n\nexport default Pallets;","import React, { Component } from 'react'\n// import ReactDOM from 'react-dom'\n\nimport './App.css'\nimport { Swatch } from 'node-vibrant/lib/color';\nimport reactCSS from 'reactcss'\nimport Pallets from './components/Pallets/Pallets'\n\nclass App extends Component {\n \n\n  render() {\n   \n    return (\n      <div className='App'>\n        <header>\n          <h1>\n            cute colors\n          </h1>\n          \n        </header>\n        \n      <Pallets/>\n      \n      </div>\n      \n    );\n}\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}